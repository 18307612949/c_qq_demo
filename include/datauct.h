/************************************************************
*		   聊天软件-服务端	          				        *
*	       by:Sucoder QQ:330729793	       				    *
*公用头文件,包含服务器连接信息,数据消息类型,公用数据结构等	*
*************************************************************
*本程序只是一个聊天服务器模型,有兴趣的朋友可以强化一下功能  *
*这个聊天服务器模型,总共花了我13个小时,请尊重别人的劳动成   *
*果,水平有限,肯定有bug,请谅解!		   					    *
*			2013.01.25	       								*
************************************************************/
/************************************************************
*本套程序涉及到的知识:										*
*		Linux编程,Windows编程,数据结构,守护进程,多线程编程, *
		网络编程,数据库编程。								*
*服务端选用linux平台,客户端采用windows平台。				*
*服务端选用mysql数据库,程序首次运行将自动进行初始化数据库   *
*数据库连接信息在chatserver/server.h头文件中设定。			*
*************************************************************
*目前实现功能：用户注册,用户登陆,相互聊天,上线/下线/消息提醒*
************************************************************/
/*****************************************************************
*数据库存密码时，没有采用加密算法。如果需要对外开放请自行加密存储*
*****************************************************************/
/************************************************************
*关于服务端域名和IP地址说明:								*
*		域名和IP地址我们采用固定式							*
************************************************************/

/*********************好友功能和离线消息功能说明**********************************************
* 好友功能和离线消息功能，原理很简单，建字段保存好友ID用‘,'分割开, 登陆时从在数据库中得取出  *
* 所有好友ID,依次查询出用户名,打包发送给新登陆用户解析,申请加为好友,发送给被申请ID,询问是    *
* 否同意,同意,服务器把ID加入双方好友字段,并通知申请方,不同意，服务器抛弃此信息,并通知申请方. *
* 实现离线消息更简单,在用户表增加一个是否有离线消息标志,并新建一个表,专用于存放所有离线消息。*
* 当用户给不在线用户发送消息时,服务器将接收方ID的离线消息标志设为1,并把接收方ID,发送方ID存   *
* 入离线消息表,当接收方登陆时,读取离线消息标志,如果为1即有离线消息,服务器去离线消息表提取出  *
* 来,并发送给接收方.由于只是做一个测试服务器，所以就没有去实现好友和离线消息功能!	         *
*********************************************************************************************/

#ifndef DATAUCT_H
#define DATAUCT_H

#define SERVERADDR "192.168.8.128"//"localhost"  //服务器域名或IP地址
#define SERVERPORT 8888 	//服务器端口
#define MAXCONN   1000       //服务器允许同时在线的用户数量 

#define USERREG 0x1 //用户注册
#define LOGIN	0x2 //登陆
#define MSGDATA 0X3 //给其它用户发送消息
#define REGSERMSG  0x4 //注册服务器返回信息
#define LOGINSERMSG  0x5 //登陆服务器返回信息
#define MSGSERMSG  0x6 //发送消息失败服务器返回信息
#define ADDCLIENT 0x7 //增加客户端
#define CUTCLIENT 0x8 //减少客户端

#define USERLEN 30
#define PASSWDLEN 30
#define MSGALLLEN 1068//消息结构体总长
#define MSGLEN  MSGALLLEN-sizeof(int)-sizeof(int)
#define UMSGLEN MSGLEN-sizeof(int)-USERLEN-sizeof(int)-USERLEN



struct Seruserinfo{ //服务器保存当前在线用户的信息,减少查询数据库次数,
	int socket;//保存与用户连接的socket;
	int id;//此用户的ID;
	char username[USERLEN];//此用户的用户名
	};

struct Message{	 //总体消息内容结构
	int type;   	//消息类型
	int torf;       //服务器回复客户机附加数值
	char data[MSGLEN]; //消息数据
	};

struct Regloginmsg{ //用户注册/登陆信息结构
	int id;
	char username[USERLEN];
	char passwd[PASSWDLEN];
	};

struct Usermsg{ //用户向用户发送消息结构
	int disid; //接收方用户ID	
	int srcid; //发送方用户ID
	char disname[USERLEN];//接收方用户名字 
	char srcname[USERLEN];//发送方用户名字
	char data[UMSGLEN];//传达目标用户的内容
	};
#endif
